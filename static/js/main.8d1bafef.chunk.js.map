{"version":3,"sources":["Components/InfoBoxes.js","Components/Map.js","Components/Table.js","Components/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBoxes","tittle","newcases","totalcases","boxType","isActive","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","cases","multiplier","recovered","deaths","Map","data","caseType","center","zoom","console","log","TileLayer","url","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","React","memo","countries","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildGraphdata","lastDataPoint","chartData","date","newDataPoint","x","y","push","timeperiod","useState","setData","useEffect","a","fetch","then","response","json","timeline","catch","error","alert","getData","marginTop","length","datasets","backgroundFill","backgroundOpacity","borderColor","height","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","isloading","setIsLoading","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setCaseType","prettyPrintStat","stat","request","getInitialData","onCountryChange","event","countryCode","target","CircularProgress","FormControl","Select","variant","onChange","MenuItem","key","iso2","todayCases","todayRecovered","todayDeaths","sort","b","sortByCases","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8d1bafef.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, Typography, CardContent } from '@material-ui/core';\r\nimport './InfoBoxes.css';\r\n\r\nconst InfoBoxes = ({ tittle, newcases, totalcases, boxType, isActive, ...props }) => {\r\n  return (\r\n    <Card onClick={props.onClick} className={`infoBox ${boxType} ${isActive && `infoBox--selected--${boxType}`}`}>\r\n      <CardContent>\r\n        <Typography className={`infoBox__tittle`} color=\"textSecondary\">{tittle}</Typography>\r\n        <h2 className={`infoBox__cases`}>{newcases}</h2>\r\n        <Typography className={`infoBox__total`} color=\"textSecondary\">{totalcases} total</Typography>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default InfoBoxes;","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer, Circle, Popup } from \"react-leaflet\";\r\nimport numeral from 'numeral';\r\nimport './Map.css';\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nconst Map = ({ data, caseType, color, center, zoom }) => {\r\n  console.log('map')\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n        {\r\n          data.map((country) => (\r\n            <Circle\r\n              center={[country.countryInfo.lat, country.countryInfo.long]}\r\n              color={color}\r\n              fillColor={color}\r\n              fillOpacity={0.4}\r\n              radius={Math.sqrt(country[caseType]) * casesTypeColors[caseType].multiplier}\r\n            >\r\n              <Popup>\r\n                <div className=\"info-container\">\r\n                  <div\r\n                    className=\"info-flag\"\r\n                    style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                  ></div>\r\n                  <div className=\"info-name\">{country.country}</div>\r\n                  <div className=\"info-confirmed\">\r\n                    Cases: {numeral(country.cases).format(\"0,0\")}\r\n                  </div>\r\n                  <div className=\"info-recovered\">\r\n                    Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                  </div>\r\n                  <div className=\"info-deaths\">\r\n                    Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                  </div>\r\n                </div>\r\n              </Popup>\r\n            </Circle>)\r\n          )\r\n        }\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\n\r\nconst Table = ({ countries, caseType }) => {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(\r\n        (country) =>\r\n          <tr>\r\n            <td>{country.country}</td>\r\n            <td><strong>{numeral(country[caseType]).format(\"0,0\")}</strong></td>\r\n          </tr>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(Table);","import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: true,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildGraphdata = (data, caseType) => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = { x: date, y: data[caseType][date] - lastDataPoint }\r\n      chartData.push(newDataPoint);\r\n    };\r\n    lastDataPoint = data[caseType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nconst LineGraph = ({ country, timeperiod, caseType, color }) => {\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      await fetch(`https://disease.sh/v3/covid-19/historical/${country}?lastdays=${timeperiod}`)\r\n        .then(response => response.json())\r\n        .then(data => {setData(buildGraphdata(country === 'all' ? data : data.timeline, caseType))})\r\n        .catch(error => {setData([]); alert('Historical data not found for country.\\nCannot show the case graph')});\r\n    };\r\n    getData();\r\n  },[country, caseType]);\r\n\r\n  return (\r\n    <div className=\"graph\" style={{marginTop: \"20px\"}}>\r\n      {data?.length > 0 && <Line data={{\r\n        datasets: [\r\n          {\r\n            backgroundFill: color,\r\n            backgroundOpacity: \"0.5\",\r\n            borderColor: color,\r\n            data: data,\r\n          },\r\n        ],\r\n      }}\r\n      options={options}\r\n      height={250}\r\n      />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(LineGraph);","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { FormControl, Select, MenuItem, Card, CardContent, CircularProgress } from '@material-ui/core'\nimport Infobox from './Components/InfoBoxes';\nimport Map from './Components/Map';\nimport Table from './Components/Table';\nimport LineGraph from './Components/LineGraph';\nimport 'leaflet/dist/leaflet.css';\nimport numeral from 'numeral';\n\nconst App = () => {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('all');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [isloading, setIsLoading] = useState(true);\n  const [mapCenter, setMapCenter] = useState({ lat: 45, lng: 0 });\n  const [mapZoom, setMapZoom] = useState(2);\n  const [caseType, setCaseType] = useState('cases')\n  const casesTypeColors = {cases: \"blue\", recovered: \"green\", deaths: \"red\"};\n\n  const sortByCases = (data, caseType) => data.sort((a, b) => a[caseType] > b[caseType] ? -1 : 1);\n  const prettyPrintStat = stat => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getInitialData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/all')\n        .then(response => response.json())\n        .then(data => setCountryInfo(data))\n        .catch(error => alert(`Some error occured!!!\\n${error}`));\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then(request => request.json())\n        .then(data => {\n          setCountries(data);\n          setTableData(data.map(country => ({ country: country.country, cases: country.cases, recovered: country.recovered, deaths: country.deaths })));\n        })\n    }\n    getInitialData();\n    setIsLoading(false);\n  }, []);\n\n  const onCountryChange = async event => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url = countryCode === 'all' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    const zoom = countryCode === 'all' ? 2 : 4;\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        const center = countryCode === 'all' ? { lat: 45, lng: 0 } : { lat: data.countryInfo.lat, lng: data.countryInfo.long };\n        setCountryInfo(data);\n        setMapCenter(center);\n        setMapZoom(zoom);\n      })\n      .catch(error => alert('Check internet and try again.'));\n  };\n\n  return (\n    <div className=\"app\">\n      {isloading ? <CircularProgress /> :\n        <>\n          <div className=\"app__main\">\n            <div className=\"app__header\">\n              <h1>COVID-19 TRACKER</h1>\n              <FormControl className=\"app__dropdown\">\n                <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n                  <MenuItem key=\"0\" value=\"all\">Worldwide</MenuItem>\n                  {countries.map((country, index) => <MenuItem key={index} value={country.countryInfo.iso2}>{country.country}</MenuItem>)}\n                </Select>\n              </FormControl>\n            </div>\n            <div className=\"app__stats\">\n              <Infobox tittle=\"Coronavirus cases\" newcases={prettyPrintStat(countryInfo.todayCases)} totalcases={prettyPrintStat(countryInfo.cases)} boxType={casesTypeColors.cases} isActive={caseType==='cases'} onClick={event => setCaseType('cases')} />\n              <Infobox tittle=\"Recovered\" newcases={prettyPrintStat(countryInfo.todayRecovered)} totalcases={prettyPrintStat(countryInfo.recovered)} boxType={casesTypeColors.recovered} isActive={caseType==='recovered'} onClick={event => setCaseType('recovered')} />\n              <Infobox tittle=\"Deaths\" newcases={prettyPrintStat(countryInfo.todayDeaths)} totalcases={prettyPrintStat(countryInfo.deaths)} boxType={casesTypeColors.deaths} isActive={caseType==='deaths'} onClick={event => setCaseType('deaths')} />\n            </div>\n            <Map data={countries} center={mapCenter} zoom={mapZoom} caseType={caseType} color={casesTypeColors[caseType]} />\n          </div>\n          <div className=\"app__sidebar\">\n            <Card>\n              <CardContent>\n                <h3>Country wise {caseType}</h3>\n                <Table countries={sortByCases(tableData, caseType)} caseType={caseType} />\n                <h3>New {caseType} in last 4 months</h3>\n                <LineGraph country={country} timeperiod={120} caseType={caseType} color={casesTypeColors[caseType]} />\n              </CardContent>\n            </Card>\n          </div>\n        </>\n      }\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}